// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: messenger.proto

#include "messenger.pb.h"
#include "messenger.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace messenger {

static const char* Messenger_method_names[] = {
  "/messenger.Messenger/Login",
  "/messenger.Messenger/SendTextMessage",
  "/messenger.Messenger/RequestPendingMessages",
};

std::unique_ptr< Messenger::Stub> Messenger::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Messenger::Stub> stub(new Messenger::Stub(channel));
  return stub;
}

Messenger::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Login_(Messenger_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendTextMessage_(Messenger_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestPendingMessages_(Messenger_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Messenger::Stub::Login(::grpc::ClientContext* context, const ::messenger::LoginRequest& request, ::messenger::LoginReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::messenger::LoginReply>* Messenger::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::messenger::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::messenger::LoginReply>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::Status Messenger::Stub::SendTextMessage(::grpc::ClientContext* context, const ::messenger::TextMessage& request, ::messenger::ResultReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SendTextMessage_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::messenger::ResultReply>* Messenger::Stub::AsyncSendTextMessageRaw(::grpc::ClientContext* context, const ::messenger::TextMessage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::messenger::ResultReply>(channel_.get(), cq, rpcmethod_SendTextMessage_, context, request);
}

::grpc::Status Messenger::Stub::RequestPendingMessages(::grpc::ClientContext* context, const ::messenger::PendingMessagesRequest& request, ::messenger::PendingMessagesReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RequestPendingMessages_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::messenger::PendingMessagesReply>* Messenger::Stub::AsyncRequestPendingMessagesRaw(::grpc::ClientContext* context, const ::messenger::PendingMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::messenger::PendingMessagesReply>(channel_.get(), cq, rpcmethod_RequestPendingMessages_, context, request);
}

Messenger::Service::Service() {
  (void)Messenger_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Messenger_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Messenger::Service, ::messenger::LoginRequest, ::messenger::LoginReply>(
          std::mem_fn(&Messenger::Service::Login), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Messenger_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Messenger::Service, ::messenger::TextMessage, ::messenger::ResultReply>(
          std::mem_fn(&Messenger::Service::SendTextMessage), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Messenger_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Messenger::Service, ::messenger::PendingMessagesRequest, ::messenger::PendingMessagesReply>(
          std::mem_fn(&Messenger::Service::RequestPendingMessages), this)));
}

Messenger::Service::~Service() {
}

::grpc::Status Messenger::Service::Login(::grpc::ServerContext* context, const ::messenger::LoginRequest* request, ::messenger::LoginReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Messenger::Service::SendTextMessage(::grpc::ServerContext* context, const ::messenger::TextMessage* request, ::messenger::ResultReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Messenger::Service::RequestPendingMessages(::grpc::ServerContext* context, const ::messenger::PendingMessagesRequest* request, ::messenger::PendingMessagesReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace messenger

