// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messenger.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messenger.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace messenger {

namespace {

const ::google::protobuf::Descriptor* ResultReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TextMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PendingMessagesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PendingMessagesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PendingMessagesReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PendingMessagesReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messenger_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_messenger_2eproto() {
  protobuf_AddDesc_messenger_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messenger.proto");
  GOOGLE_CHECK(file != NULL);
  ResultReply_descriptor_ = file->message_type(0);
  static const int ResultReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultReply, result_),
  };
  ResultReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResultReply_descriptor_,
      ResultReply::default_instance_,
      ResultReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResultReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultReply, _is_default_instance_));
  ResultReply_Result_descriptor_ = ResultReply_descriptor_->enum_type(0);
  LoginRequest_descriptor_ = file->message_type(1);
  static const int LoginRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, user_name_),
  };
  LoginRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _is_default_instance_));
  LoginReply_descriptor_ = file->message_type(2);
  static const int LoginReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReply, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReply, time_stamp_),
  };
  LoginReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginReply_descriptor_,
      LoginReply::default_instance_,
      LoginReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReply, _is_default_instance_));
  TextMessage_descriptor_ = file->message_type(3);
  static const int TextMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, text_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, time_stamp_),
  };
  TextMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TextMessage_descriptor_,
      TextMessage::default_instance_,
      TextMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(TextMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, _is_default_instance_));
  PendingMessagesRequest_descriptor_ = file->message_type(4);
  static const int PendingMessagesRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PendingMessagesRequest, time_stamp_),
  };
  PendingMessagesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PendingMessagesRequest_descriptor_,
      PendingMessagesRequest::default_instance_,
      PendingMessagesRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PendingMessagesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PendingMessagesRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PendingMessagesRequest, _is_default_instance_));
  PendingMessagesReply_descriptor_ = file->message_type(5);
  static const int PendingMessagesReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PendingMessagesReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PendingMessagesReply, text_messages_),
  };
  PendingMessagesReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PendingMessagesReply_descriptor_,
      PendingMessagesReply::default_instance_,
      PendingMessagesReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(PendingMessagesReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PendingMessagesReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PendingMessagesReply, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messenger_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResultReply_descriptor_, &ResultReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginReply_descriptor_, &LoginReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TextMessage_descriptor_, &TextMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PendingMessagesRequest_descriptor_, &PendingMessagesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PendingMessagesReply_descriptor_, &PendingMessagesReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messenger_2eproto() {
  delete ResultReply::default_instance_;
  delete ResultReply_reflection_;
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete LoginReply::default_instance_;
  delete LoginReply_reflection_;
  delete TextMessage::default_instance_;
  delete TextMessage_reflection_;
  delete PendingMessagesRequest::default_instance_;
  delete PendingMessagesRequest_reflection_;
  delete PendingMessagesReply::default_instance_;
  delete PendingMessagesReply_reflection_;
}

void protobuf_AddDesc_messenger_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_messenger_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017messenger.proto\022\tmessenger\"_\n\013ResultRe"
    "ply\022-\n\006result\030\001 \001(\0162\035.messenger.ResultRe"
    "ply.Result\"!\n\006Result\022\013\n\007SUCCESS\020\000\022\n\n\006FAI"
    "LED\020\001\"!\n\014LoginRequest\022\021\n\tuser_name\030\001 \001(\t"
    "\"Y\n\nLoginReply\022&\n\006result\030\001 \001(\0132\026.messeng"
    "er.ResultReply\022\017\n\007user_id\030\002 \001(\r\022\022\n\ntime_"
    "stamp\030\003 \001(\004\"H\n\013TextMessage\022\017\n\007user_id\030\001 "
    "\001(\r\022\024\n\014text_message\030\002 \001(\t\022\022\n\ntime_stamp\030"
    "\003 \001(\004\",\n\026PendingMessagesRequest\022\022\n\ntime_"
    "stamp\030\001 \001(\004\"U\n\024PendingMessagesReply\022&\n\006r"
    "esult\030\001 \001(\0132\026.messenger.ResultReply\022\025\n\rt"
    "ext_messages\030\002 \003(\t2\353\001\n\tMessenger\0229\n\005Logi"
    "n\022\027.messenger.LoginRequest\032\025.messenger.L"
    "oginReply\"\000\022C\n\017SendTextMessage\022\026.messeng"
    "er.TextMessage\032\026.messenger.ResultReply\"\000"
    "\022^\n\026RequestPendingMessages\022!.messenger.P"
    "endingMessagesRequest\032\037.messenger.Pendin"
    "gMessagesReply\"\000b\006proto3", 704);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messenger.proto", &protobuf_RegisterTypes);
  ResultReply::default_instance_ = new ResultReply();
  LoginRequest::default_instance_ = new LoginRequest();
  LoginReply::default_instance_ = new LoginReply();
  TextMessage::default_instance_ = new TextMessage();
  PendingMessagesRequest::default_instance_ = new PendingMessagesRequest();
  PendingMessagesReply::default_instance_ = new PendingMessagesReply();
  ResultReply::default_instance_->InitAsDefaultInstance();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginReply::default_instance_->InitAsDefaultInstance();
  TextMessage::default_instance_->InitAsDefaultInstance();
  PendingMessagesRequest::default_instance_->InitAsDefaultInstance();
  PendingMessagesReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messenger_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messenger_2eproto {
  StaticDescriptorInitializer_messenger_2eproto() {
    protobuf_AddDesc_messenger_2eproto();
  }
} static_descriptor_initializer_messenger_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ResultReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultReply_Result_descriptor_;
}
bool ResultReply_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResultReply_Result ResultReply::SUCCESS;
const ResultReply_Result ResultReply::FAILED;
const ResultReply_Result ResultReply::Result_MIN;
const ResultReply_Result ResultReply::Result_MAX;
const int ResultReply::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResultReply::ResultReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:messenger.ResultReply)
}

void ResultReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResultReply::ResultReply(const ResultReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:messenger.ResultReply)
}

void ResultReply::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_ = 0;
}

ResultReply::~ResultReply() {
  // @@protoc_insertion_point(destructor:messenger.ResultReply)
  SharedDtor();
}

void ResultReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResultReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultReply_descriptor_;
}

const ResultReply& ResultReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messenger_2eproto();
  return *default_instance_;
}

ResultReply* ResultReply::default_instance_ = NULL;

ResultReply* ResultReply::New(::google::protobuf::Arena* arena) const {
  ResultReply* n = new ResultReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResultReply::Clear() {
// @@protoc_insertion_point(message_clear_start:messenger.ResultReply)
  result_ = 0;
}

bool ResultReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:messenger.ResultReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .messenger.ResultReply.Result result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::messenger::ResultReply_Result >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:messenger.ResultReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:messenger.ResultReply)
  return false;
#undef DO_
}

void ResultReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:messenger.ResultReply)
  // optional .messenger.ResultReply.Result result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:messenger.ResultReply)
}

::google::protobuf::uint8* ResultReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:messenger.ResultReply)
  // optional .messenger.ResultReply.Result result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:messenger.ResultReply)
  return target;
}

int ResultReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:messenger.ResultReply)
  int total_size = 0;

  // optional .messenger.ResultReply.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messenger.ResultReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResultReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResultReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:messenger.ResultReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:messenger.ResultReply)
    MergeFrom(*source);
  }
}

void ResultReply::MergeFrom(const ResultReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messenger.ResultReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void ResultReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messenger.ResultReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultReply::CopyFrom(const ResultReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messenger.ResultReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultReply::IsInitialized() const {

  return true;
}

void ResultReply::Swap(ResultReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultReply::InternalSwap(ResultReply* other) {
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResultReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultReply_descriptor_;
  metadata.reflection = ResultReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResultReply

// optional .messenger.ResultReply.Result result = 1;
void ResultReply::clear_result() {
  result_ = 0;
}
 ::messenger::ResultReply_Result ResultReply::result() const {
  // @@protoc_insertion_point(field_get:messenger.ResultReply.result)
  return static_cast< ::messenger::ResultReply_Result >(result_);
}
 void ResultReply::set_result(::messenger::ResultReply_Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:messenger.ResultReply.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:messenger.LoginRequest)
}

void LoginRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:messenger.LoginRequest)
}

void LoginRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:messenger.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messenger_2eproto();
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New(::google::protobuf::Arena* arena) const {
  LoginRequest* n = new LoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:messenger.LoginRequest)
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:messenger.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "messenger.LoginRequest.user_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:messenger.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:messenger.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:messenger.LoginRequest)
  // optional string user_name = 1;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "messenger.LoginRequest.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:messenger.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:messenger.LoginRequest)
  // optional string user_name = 1;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "messenger.LoginRequest.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:messenger.LoginRequest)
  return target;
}

int LoginRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:messenger.LoginRequest)
  int total_size = 0;

  // optional string user_name = 1;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messenger.LoginRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:messenger.LoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:messenger.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messenger.LoginRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messenger.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messenger.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  user_name_.Swap(&other->user_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequest

// optional string user_name = 1;
void LoginRequest::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequest::user_name() const {
  // @@protoc_insertion_point(field_get:messenger.LoginRequest.user_name)
  return user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messenger.LoginRequest.user_name)
}
 void LoginRequest::set_user_name(const char* value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messenger.LoginRequest.user_name)
}
 void LoginRequest::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messenger.LoginRequest.user_name)
}
 ::std::string* LoginRequest::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:messenger.LoginRequest.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:messenger.LoginRequest.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:messenger.LoginRequest.user_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginReply::kResultFieldNumber;
const int LoginReply::kUserIdFieldNumber;
const int LoginReply::kTimeStampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginReply::LoginReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:messenger.LoginReply)
}

void LoginReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  result_ = const_cast< ::messenger::ResultReply*>(&::messenger::ResultReply::default_instance());
}

LoginReply::LoginReply(const LoginReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:messenger.LoginReply)
}

void LoginReply::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_ = NULL;
  user_id_ = 0u;
  time_stamp_ = GOOGLE_ULONGLONG(0);
}

LoginReply::~LoginReply() {
  // @@protoc_insertion_point(destructor:messenger.LoginReply)
  SharedDtor();
}

void LoginReply::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void LoginReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReply_descriptor_;
}

const LoginReply& LoginReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messenger_2eproto();
  return *default_instance_;
}

LoginReply* LoginReply::default_instance_ = NULL;

LoginReply* LoginReply::New(::google::protobuf::Arena* arena) const {
  LoginReply* n = new LoginReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginReply::Clear() {
// @@protoc_insertion_point(message_clear_start:messenger.LoginReply)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LoginReply, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LoginReply*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_stamp_, user_id_);
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool LoginReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:messenger.LoginReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .messenger.ResultReply result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_stamp;
        break;
      }

      // optional uint64 time_stamp = 3;
      case 3: {
        if (tag == 24) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:messenger.LoginReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:messenger.LoginReply)
  return false;
#undef DO_
}

void LoginReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:messenger.LoginReply)
  // optional .messenger.ResultReply result = 1;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  // optional uint32 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional uint64 time_stamp = 3;
  if (this->time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time_stamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:messenger.LoginReply)
}

::google::protobuf::uint8* LoginReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:messenger.LoginReply)
  // optional .messenger.ResultReply result = 1;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->result_, false, target);
  }

  // optional uint32 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // optional uint64 time_stamp = 3;
  if (this->time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time_stamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:messenger.LoginReply)
  return target;
}

int LoginReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:messenger.LoginReply)
  int total_size = 0;

  // optional .messenger.ResultReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);
  }

  // optional uint32 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // optional uint64 time_stamp = 3;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_stamp());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messenger.LoginReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:messenger.LoginReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:messenger.LoginReply)
    MergeFrom(*source);
  }
}

void LoginReply::MergeFrom(const LoginReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messenger.LoginReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_result()) {
    mutable_result()->::messenger::ResultReply::MergeFrom(from.result());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
}

void LoginReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messenger.LoginReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReply::CopyFrom(const LoginReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messenger.LoginReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReply::IsInitialized() const {

  return true;
}

void LoginReply::Swap(LoginReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginReply::InternalSwap(LoginReply* other) {
  std::swap(result_, other->result_);
  std::swap(user_id_, other->user_id_);
  std::swap(time_stamp_, other->time_stamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginReply_descriptor_;
  metadata.reflection = LoginReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginReply

// optional .messenger.ResultReply result = 1;
bool LoginReply::has_result() const {
  return !_is_default_instance_ && result_ != NULL;
}
void LoginReply::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
const ::messenger::ResultReply& LoginReply::result() const {
  // @@protoc_insertion_point(field_get:messenger.LoginReply.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
::messenger::ResultReply* LoginReply::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::messenger::ResultReply;
  }
  // @@protoc_insertion_point(field_mutable:messenger.LoginReply.result)
  return result_;
}
::messenger::ResultReply* LoginReply::release_result() {
  // @@protoc_insertion_point(field_release:messenger.LoginReply.result)
  
  ::messenger::ResultReply* temp = result_;
  result_ = NULL;
  return temp;
}
void LoginReply::set_allocated_result(::messenger::ResultReply* result) {
  delete result_;
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:messenger.LoginReply.result)
}

// optional uint32 user_id = 2;
void LoginReply::clear_user_id() {
  user_id_ = 0u;
}
 ::google::protobuf::uint32 LoginReply::user_id() const {
  // @@protoc_insertion_point(field_get:messenger.LoginReply.user_id)
  return user_id_;
}
 void LoginReply::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:messenger.LoginReply.user_id)
}

// optional uint64 time_stamp = 3;
void LoginReply::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 LoginReply::time_stamp() const {
  // @@protoc_insertion_point(field_get:messenger.LoginReply.time_stamp)
  return time_stamp_;
}
 void LoginReply::set_time_stamp(::google::protobuf::uint64 value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:messenger.LoginReply.time_stamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextMessage::kUserIdFieldNumber;
const int TextMessage::kTextMessageFieldNumber;
const int TextMessage::kTimeStampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextMessage::TextMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:messenger.TextMessage)
}

void TextMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TextMessage::TextMessage(const TextMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:messenger.TextMessage)
}

void TextMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_ = GOOGLE_ULONGLONG(0);
}

TextMessage::~TextMessage() {
  // @@protoc_insertion_point(destructor:messenger.TextMessage)
  SharedDtor();
}

void TextMessage::SharedDtor() {
  text_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TextMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextMessage_descriptor_;
}

const TextMessage& TextMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messenger_2eproto();
  return *default_instance_;
}

TextMessage* TextMessage::default_instance_ = NULL;

TextMessage* TextMessage::New(::google::protobuf::Arena* arena) const {
  TextMessage* n = new TextMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TextMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:messenger.TextMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TextMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TextMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_stamp_, user_id_);
  text_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TextMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:messenger.TextMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text_message;
        break;
      }

      // optional string text_message = 2;
      case 2: {
        if (tag == 18) {
         parse_text_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text_message().data(), this->text_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "messenger.TextMessage.text_message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_stamp;
        break;
      }

      // optional uint64 time_stamp = 3;
      case 3: {
        if (tag == 24) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:messenger.TextMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:messenger.TextMessage)
  return false;
#undef DO_
}

void TextMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:messenger.TextMessage)
  // optional uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional string text_message = 2;
  if (this->text_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "messenger.TextMessage.text_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text_message(), output);
  }

  // optional uint64 time_stamp = 3;
  if (this->time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time_stamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:messenger.TextMessage)
}

::google::protobuf::uint8* TextMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:messenger.TextMessage)
  // optional uint32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // optional string text_message = 2;
  if (this->text_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "messenger.TextMessage.text_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text_message(), target);
  }

  // optional uint64 time_stamp = 3;
  if (this->time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time_stamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:messenger.TextMessage)
  return target;
}

int TextMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:messenger.TextMessage)
  int total_size = 0;

  // optional uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // optional string text_message = 2;
  if (this->text_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text_message());
  }

  // optional uint64 time_stamp = 3;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_stamp());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messenger.TextMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TextMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TextMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:messenger.TextMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:messenger.TextMessage)
    MergeFrom(*source);
  }
}

void TextMessage::MergeFrom(const TextMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messenger.TextMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.text_message().size() > 0) {

    text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
  }
  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
}

void TextMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messenger.TextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextMessage::CopyFrom(const TextMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messenger.TextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextMessage::IsInitialized() const {

  return true;
}

void TextMessage::Swap(TextMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextMessage::InternalSwap(TextMessage* other) {
  std::swap(user_id_, other->user_id_);
  text_message_.Swap(&other->text_message_);
  std::swap(time_stamp_, other->time_stamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TextMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextMessage_descriptor_;
  metadata.reflection = TextMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TextMessage

// optional uint32 user_id = 1;
void TextMessage::clear_user_id() {
  user_id_ = 0u;
}
 ::google::protobuf::uint32 TextMessage::user_id() const {
  // @@protoc_insertion_point(field_get:messenger.TextMessage.user_id)
  return user_id_;
}
 void TextMessage::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:messenger.TextMessage.user_id)
}

// optional string text_message = 2;
void TextMessage::clear_text_message() {
  text_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TextMessage::text_message() const {
  // @@protoc_insertion_point(field_get:messenger.TextMessage.text_message)
  return text_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TextMessage::set_text_message(const ::std::string& value) {
  
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messenger.TextMessage.text_message)
}
 void TextMessage::set_text_message(const char* value) {
  
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messenger.TextMessage.text_message)
}
 void TextMessage::set_text_message(const char* value, size_t size) {
  
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messenger.TextMessage.text_message)
}
 ::std::string* TextMessage::mutable_text_message() {
  
  // @@protoc_insertion_point(field_mutable:messenger.TextMessage.text_message)
  return text_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TextMessage::release_text_message() {
  // @@protoc_insertion_point(field_release:messenger.TextMessage.text_message)
  
  return text_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TextMessage::set_allocated_text_message(::std::string* text_message) {
  if (text_message != NULL) {
    
  } else {
    
  }
  text_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_message);
  // @@protoc_insertion_point(field_set_allocated:messenger.TextMessage.text_message)
}

// optional uint64 time_stamp = 3;
void TextMessage::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TextMessage::time_stamp() const {
  // @@protoc_insertion_point(field_get:messenger.TextMessage.time_stamp)
  return time_stamp_;
}
 void TextMessage::set_time_stamp(::google::protobuf::uint64 value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:messenger.TextMessage.time_stamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PendingMessagesRequest::kTimeStampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PendingMessagesRequest::PendingMessagesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:messenger.PendingMessagesRequest)
}

void PendingMessagesRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PendingMessagesRequest::PendingMessagesRequest(const PendingMessagesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:messenger.PendingMessagesRequest)
}

void PendingMessagesRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
}

PendingMessagesRequest::~PendingMessagesRequest() {
  // @@protoc_insertion_point(destructor:messenger.PendingMessagesRequest)
  SharedDtor();
}

void PendingMessagesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PendingMessagesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PendingMessagesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PendingMessagesRequest_descriptor_;
}

const PendingMessagesRequest& PendingMessagesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messenger_2eproto();
  return *default_instance_;
}

PendingMessagesRequest* PendingMessagesRequest::default_instance_ = NULL;

PendingMessagesRequest* PendingMessagesRequest::New(::google::protobuf::Arena* arena) const {
  PendingMessagesRequest* n = new PendingMessagesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PendingMessagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:messenger.PendingMessagesRequest)
  time_stamp_ = GOOGLE_ULONGLONG(0);
}

bool PendingMessagesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:messenger.PendingMessagesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 time_stamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:messenger.PendingMessagesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:messenger.PendingMessagesRequest)
  return false;
#undef DO_
}

void PendingMessagesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:messenger.PendingMessagesRequest)
  // optional uint64 time_stamp = 1;
  if (this->time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_stamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:messenger.PendingMessagesRequest)
}

::google::protobuf::uint8* PendingMessagesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:messenger.PendingMessagesRequest)
  // optional uint64 time_stamp = 1;
  if (this->time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time_stamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:messenger.PendingMessagesRequest)
  return target;
}

int PendingMessagesRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:messenger.PendingMessagesRequest)
  int total_size = 0;

  // optional uint64 time_stamp = 1;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_stamp());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PendingMessagesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messenger.PendingMessagesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PendingMessagesRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PendingMessagesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:messenger.PendingMessagesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:messenger.PendingMessagesRequest)
    MergeFrom(*source);
  }
}

void PendingMessagesRequest::MergeFrom(const PendingMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messenger.PendingMessagesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
}

void PendingMessagesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messenger.PendingMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PendingMessagesRequest::CopyFrom(const PendingMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messenger.PendingMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingMessagesRequest::IsInitialized() const {

  return true;
}

void PendingMessagesRequest::Swap(PendingMessagesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PendingMessagesRequest::InternalSwap(PendingMessagesRequest* other) {
  std::swap(time_stamp_, other->time_stamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PendingMessagesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PendingMessagesRequest_descriptor_;
  metadata.reflection = PendingMessagesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PendingMessagesRequest

// optional uint64 time_stamp = 1;
void PendingMessagesRequest::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PendingMessagesRequest::time_stamp() const {
  // @@protoc_insertion_point(field_get:messenger.PendingMessagesRequest.time_stamp)
  return time_stamp_;
}
 void PendingMessagesRequest::set_time_stamp(::google::protobuf::uint64 value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:messenger.PendingMessagesRequest.time_stamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PendingMessagesReply::kResultFieldNumber;
const int PendingMessagesReply::kTextMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PendingMessagesReply::PendingMessagesReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:messenger.PendingMessagesReply)
}

void PendingMessagesReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  result_ = const_cast< ::messenger::ResultReply*>(&::messenger::ResultReply::default_instance());
}

PendingMessagesReply::PendingMessagesReply(const PendingMessagesReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:messenger.PendingMessagesReply)
}

void PendingMessagesReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
}

PendingMessagesReply::~PendingMessagesReply() {
  // @@protoc_insertion_point(destructor:messenger.PendingMessagesReply)
  SharedDtor();
}

void PendingMessagesReply::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void PendingMessagesReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PendingMessagesReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PendingMessagesReply_descriptor_;
}

const PendingMessagesReply& PendingMessagesReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messenger_2eproto();
  return *default_instance_;
}

PendingMessagesReply* PendingMessagesReply::default_instance_ = NULL;

PendingMessagesReply* PendingMessagesReply::New(::google::protobuf::Arena* arena) const {
  PendingMessagesReply* n = new PendingMessagesReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PendingMessagesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:messenger.PendingMessagesReply)
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
  text_messages_.Clear();
}

bool PendingMessagesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:messenger.PendingMessagesReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .messenger.ResultReply result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text_messages;
        break;
      }

      // repeated string text_messages = 2;
      case 2: {
        if (tag == 18) {
         parse_text_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_text_messages()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text_messages(this->text_messages_size() - 1).data(),
            this->text_messages(this->text_messages_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "messenger.PendingMessagesReply.text_messages"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text_messages;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:messenger.PendingMessagesReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:messenger.PendingMessagesReply)
  return false;
#undef DO_
}

void PendingMessagesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:messenger.PendingMessagesReply)
  // optional .messenger.ResultReply result = 1;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  // repeated string text_messages = 2;
  for (int i = 0; i < this->text_messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text_messages(i).data(), this->text_messages(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "messenger.PendingMessagesReply.text_messages");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text_messages(i), output);
  }

  // @@protoc_insertion_point(serialize_end:messenger.PendingMessagesReply)
}

::google::protobuf::uint8* PendingMessagesReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:messenger.PendingMessagesReply)
  // optional .messenger.ResultReply result = 1;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->result_, false, target);
  }

  // repeated string text_messages = 2;
  for (int i = 0; i < this->text_messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text_messages(i).data(), this->text_messages(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "messenger.PendingMessagesReply.text_messages");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->text_messages(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:messenger.PendingMessagesReply)
  return target;
}

int PendingMessagesReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:messenger.PendingMessagesReply)
  int total_size = 0;

  // optional .messenger.ResultReply result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);
  }

  // repeated string text_messages = 2;
  total_size += 1 * this->text_messages_size();
  for (int i = 0; i < this->text_messages_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->text_messages(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PendingMessagesReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:messenger.PendingMessagesReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PendingMessagesReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PendingMessagesReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:messenger.PendingMessagesReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:messenger.PendingMessagesReply)
    MergeFrom(*source);
  }
}

void PendingMessagesReply::MergeFrom(const PendingMessagesReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messenger.PendingMessagesReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  text_messages_.MergeFrom(from.text_messages_);
  if (from.has_result()) {
    mutable_result()->::messenger::ResultReply::MergeFrom(from.result());
  }
}

void PendingMessagesReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:messenger.PendingMessagesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PendingMessagesReply::CopyFrom(const PendingMessagesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messenger.PendingMessagesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingMessagesReply::IsInitialized() const {

  return true;
}

void PendingMessagesReply::Swap(PendingMessagesReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PendingMessagesReply::InternalSwap(PendingMessagesReply* other) {
  std::swap(result_, other->result_);
  text_messages_.UnsafeArenaSwap(&other->text_messages_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PendingMessagesReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PendingMessagesReply_descriptor_;
  metadata.reflection = PendingMessagesReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PendingMessagesReply

// optional .messenger.ResultReply result = 1;
bool PendingMessagesReply::has_result() const {
  return !_is_default_instance_ && result_ != NULL;
}
void PendingMessagesReply::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
const ::messenger::ResultReply& PendingMessagesReply::result() const {
  // @@protoc_insertion_point(field_get:messenger.PendingMessagesReply.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
::messenger::ResultReply* PendingMessagesReply::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::messenger::ResultReply;
  }
  // @@protoc_insertion_point(field_mutable:messenger.PendingMessagesReply.result)
  return result_;
}
::messenger::ResultReply* PendingMessagesReply::release_result() {
  // @@protoc_insertion_point(field_release:messenger.PendingMessagesReply.result)
  
  ::messenger::ResultReply* temp = result_;
  result_ = NULL;
  return temp;
}
void PendingMessagesReply::set_allocated_result(::messenger::ResultReply* result) {
  delete result_;
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:messenger.PendingMessagesReply.result)
}

// repeated string text_messages = 2;
int PendingMessagesReply::text_messages_size() const {
  return text_messages_.size();
}
void PendingMessagesReply::clear_text_messages() {
  text_messages_.Clear();
}
 const ::std::string& PendingMessagesReply::text_messages(int index) const {
  // @@protoc_insertion_point(field_get:messenger.PendingMessagesReply.text_messages)
  return text_messages_.Get(index);
}
 ::std::string* PendingMessagesReply::mutable_text_messages(int index) {
  // @@protoc_insertion_point(field_mutable:messenger.PendingMessagesReply.text_messages)
  return text_messages_.Mutable(index);
}
 void PendingMessagesReply::set_text_messages(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:messenger.PendingMessagesReply.text_messages)
  text_messages_.Mutable(index)->assign(value);
}
 void PendingMessagesReply::set_text_messages(int index, const char* value) {
  text_messages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:messenger.PendingMessagesReply.text_messages)
}
 void PendingMessagesReply::set_text_messages(int index, const char* value, size_t size) {
  text_messages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:messenger.PendingMessagesReply.text_messages)
}
 ::std::string* PendingMessagesReply::add_text_messages() {
  // @@protoc_insertion_point(field_add_mutable:messenger.PendingMessagesReply.text_messages)
  return text_messages_.Add();
}
 void PendingMessagesReply::add_text_messages(const ::std::string& value) {
  text_messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:messenger.PendingMessagesReply.text_messages)
}
 void PendingMessagesReply::add_text_messages(const char* value) {
  text_messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:messenger.PendingMessagesReply.text_messages)
}
 void PendingMessagesReply::add_text_messages(const char* value, size_t size) {
  text_messages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:messenger.PendingMessagesReply.text_messages)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PendingMessagesReply::text_messages() const {
  // @@protoc_insertion_point(field_list:messenger.PendingMessagesReply.text_messages)
  return text_messages_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PendingMessagesReply::mutable_text_messages() {
  // @@protoc_insertion_point(field_mutable_list:messenger.PendingMessagesReply.text_messages)
  return &text_messages_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace messenger

// @@protoc_insertion_point(global_scope)
