// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messenger.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Messenger {
  public static class Messenger
  {
    static readonly string __ServiceName = "messenger.Messenger";

    static readonly Marshaller<global::Messenger.LoginRequest> __Marshaller_LoginRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Messenger.LoginRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Messenger.LoginReply> __Marshaller_LoginReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Messenger.LoginReply.Parser.ParseFrom);
    static readonly Marshaller<global::Messenger.TextMessage> __Marshaller_TextMessage = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Messenger.TextMessage.Parser.ParseFrom);
    static readonly Marshaller<global::Messenger.ResultReply> __Marshaller_ResultReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Messenger.ResultReply.Parser.ParseFrom);
    static readonly Marshaller<global::Messenger.PendingMessagesRequest> __Marshaller_PendingMessagesRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Messenger.PendingMessagesRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Messenger.PendingMessagesReply> __Marshaller_PendingMessagesReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Messenger.PendingMessagesReply.Parser.ParseFrom);

    static readonly Method<global::Messenger.LoginRequest, global::Messenger.LoginReply> __Method_Login = new Method<global::Messenger.LoginRequest, global::Messenger.LoginReply>(
        MethodType.Unary,
        __ServiceName,
        "Login",
        __Marshaller_LoginRequest,
        __Marshaller_LoginReply);

    static readonly Method<global::Messenger.TextMessage, global::Messenger.ResultReply> __Method_SendTextMessage = new Method<global::Messenger.TextMessage, global::Messenger.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "SendTextMessage",
        __Marshaller_TextMessage,
        __Marshaller_ResultReply);

    static readonly Method<global::Messenger.PendingMessagesRequest, global::Messenger.PendingMessagesReply> __Method_RequestPendingMessages = new Method<global::Messenger.PendingMessagesRequest, global::Messenger.PendingMessagesReply>(
        MethodType.Unary,
        __ServiceName,
        "RequestPendingMessages",
        __Marshaller_PendingMessagesRequest,
        __Marshaller_PendingMessagesReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Messenger.MessengerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Messenger</summary>
    public abstract class MessengerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Messenger.LoginReply> Login(global::Messenger.LoginRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Messenger.ResultReply> SendTextMessage(global::Messenger.TextMessage request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Messenger.PendingMessagesReply> RequestPendingMessages(global::Messenger.PendingMessagesRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Messenger</summary>
    public class MessengerClient : ClientBase<MessengerClient>
    {
      /// <summary>Creates a new client for Messenger</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MessengerClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Messenger that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MessengerClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MessengerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MessengerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Messenger.LoginReply Login(global::Messenger.LoginRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Login(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Messenger.LoginReply Login(global::Messenger.LoginRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Login, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Messenger.LoginReply> LoginAsync(global::Messenger.LoginRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LoginAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Messenger.LoginReply> LoginAsync(global::Messenger.LoginRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Login, null, options, request);
      }
      public virtual global::Messenger.ResultReply SendTextMessage(global::Messenger.TextMessage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendTextMessage(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Messenger.ResultReply SendTextMessage(global::Messenger.TextMessage request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendTextMessage, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Messenger.ResultReply> SendTextMessageAsync(global::Messenger.TextMessage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendTextMessageAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Messenger.ResultReply> SendTextMessageAsync(global::Messenger.TextMessage request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendTextMessage, null, options, request);
      }
      public virtual global::Messenger.PendingMessagesReply RequestPendingMessages(global::Messenger.PendingMessagesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RequestPendingMessages(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Messenger.PendingMessagesReply RequestPendingMessages(global::Messenger.PendingMessagesRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestPendingMessages, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Messenger.PendingMessagesReply> RequestPendingMessagesAsync(global::Messenger.PendingMessagesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RequestPendingMessagesAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Messenger.PendingMessagesReply> RequestPendingMessagesAsync(global::Messenger.PendingMessagesRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestPendingMessages, null, options, request);
      }
      protected override MessengerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MessengerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(MessengerBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Login, serviceImpl.Login)
          .AddMethod(__Method_SendTextMessage, serviceImpl.SendTextMessage)
          .AddMethod(__Method_RequestPendingMessages, serviceImpl.RequestPendingMessages).Build();
    }

  }
}
#endregion
